#!/bin/bash
# modules/create_scripts.sh
# Creates utility scripts for the dotfiles system

# Create MCP setup script
cat > scripts/setup-mcp.sh << 'EOF'
#!/bin/bash
# MCP Setup and Management Script for Claude Desktop

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîå MCP (Model Context Protocol) Setup for Claude Desktop${NC}"

# Check if Claude Desktop is installed
if [ ! -d "/Applications/Claude.app" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Claude Desktop not found. Please install Claude Desktop first.${NC}"
    echo -e "${BLUE}Download from: https://claude.ai/download${NC}"
    exit 1
fi

# Check if Node.js is installed
if ! command -v node >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Node.js is required for MCP servers but not found.${NC}"
    echo -e "${YELLOW}Installing Node.js via Homebrew...${NC}"
    brew install node
fi

echo -e "\n${BLUE}üìã Available MCP Servers:${NC}"
echo -e "   1. üìÅ Filesystem - Secure file system access"
echo -e "   2. üêô GitHub - Repository integration" 
echo -e "   3. üîç Brave Search - Web search capabilities"
echo -e "   4. üóÉÔ∏è  Git - Git repository operations"
echo -e "   5. üß† Memory - Persistent conversation memory"

# Test MCP servers
echo -e "\n${BLUE}üöÄ Testing MCP Servers:${NC}"
echo -e "${YELLOW}Testing filesystem server...${NC}"
if npx -y @modelcontextprotocol/server-filesystem --version >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Filesystem server available${NC}"
else
    echo -e "${RED}‚ùå Filesystem server installation failed${NC}"
fi

echo -e "\n${GREEN}üéâ MCP setup complete!${NC}"
echo -e "${YELLOW}Restart Claude Desktop to load MCP servers${NC}"
EOF

# Create project initialization script
cat > scripts/init-project.sh << 'EOF'
#!/bin/bash
# Initialize new project with full configuration setup

PROJECT_NAME=$1
if [ -z "$PROJECT_NAME" ]; then
    echo "Usage: $0 <project-name>"
    exit 1
fi

# Check if client environment is loaded
if [ -z "$CLIENT_SHORT" ]; then
    echo "‚ö†Ô∏è  No client environment loaded. Please run:"
    echo "   source configs/client-[name].env && ./scripts/init-project.sh $PROJECT_NAME"
    exit 1
fi

echo "üöÄ Initializing $PROJECT_NAME for $CLIENT_NAME..."

# Create project directory
mkdir -p ~/Development/$WORK_DIR_NAME/$PROJECT_NAME
cd ~/Development/$WORK_DIR_NAME/$PROJECT_NAME

# Copy configurations
cp ~/.dotfiles/ai/cursor/.cursorrules .cursorrules 2>/dev/null || echo "# Cursor rules will be generated by bootstrap" > .cursorrules
cp ~/.dotfiles/ai/templates/client-specific/${CLIENT_SHORT}-context.md .ai-context.md 2>/dev/null || echo "# AI context will be generated by bootstrap" > .ai-context.md

# Initialize git
git init
echo "node_modules/" > .gitignore
echo "dist/" >> .gitignore
echo ".env" >> .gitignore
echo ".DS_Store" >> .gitignore

echo "‚úÖ Project $PROJECT_NAME initialized!"
echo "üìÅ Location: ~/Development/$WORK_DIR_NAME/$PROJECT_NAME"
EOF

# Create client switcher script
cat > scripts/switch-client.sh << 'EOF'
#!/bin/bash
# Switch between different client configurations

echo "üîÑ Available Client Configurations:"
echo ""

# List available client configs
configs=(~/.dotfiles/configs/client-*.env)
if [ ${#configs[@]} -eq 0 ]; then
    echo "‚ùå No client configurations found in ~/.dotfiles/configs/"
    echo "üí° Create one by copying client-template.env"
    exit 1
fi

# Display options
i=1
for config in "${configs[@]}"; do
    if [ -f "$config" ]; then
        basename=$(basename "$config" .env)
        client_name=$(echo "$basename" | sed 's/client-//')
        echo "   $i) $client_name"
        i=$((i + 1))
    fi
done

echo ""
read -p "Select client configuration (1-$((i-1))): " -n 1 -r
echo ""

# Validate selection
if ! [[ $REPLY =~ ^[0-9]+$ ]] || [ $REPLY -lt 1 ] || [ $REPLY -gt $((i-1)) ]; then
    echo "‚ùå Invalid selection"
    exit 1
fi

# Get selected config
selected_config=${configs[$((REPLY-1))]}
client_name=$(basename "$selected_config" .env | sed 's/client-//')

echo "üîÑ Switching to: $client_name"
echo "üìù To activate, run:"
echo "   source $selected_config"
echo "   export PS1=\"[$client_name] \$PS1\""
EOF

# Create development environment health check script
cat > scripts/health-check.sh << 'EOF'
#!/bin/bash
# Health check script for development environment

echo "üè• Development Environment Health Check"
echo "======================================"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Check functions
check_command() {
    if command -v "$1" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ $1 installed${NC}"
        if [ -n "$2" ]; then
            echo "   Version: $($1 $2 2>/dev/null || echo 'Unknown')"
        fi
    else
        echo -e "${RED}‚ùå $1 not found${NC}"
    fi
}

check_directory() {
    if [ -d "$1" ]; then
        echo -e "${GREEN}‚úÖ $1 exists${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $1 not found${NC}"
    fi
}

echo ""
echo "üõ†Ô∏è  Essential Tools:"
check_command "brew" "--version"
check_command "git" "--version"
check_command "node" "--version"
check_command "npm" "--version"
check_command "python" "--version"
check_command "zsh" "--version"

echo ""
echo "üéØ Development Tools:"
check_command "code" "--version"
check_command "gh" "--version"
check_command "docker" "--version"
check_command "aws" "--version"

echo ""
echo "üìÅ Directory Structure:"
check_directory "$HOME/.dotfiles"
check_directory "$HOME/Development"
check_directory "$HOME/.oh-my-zsh"

echo ""
echo "üîß Configuration Files:"
check_directory "$HOME/.dotfiles/configs"
[ -f "$HOME/.gitconfig" ] && echo -e "${GREEN}‚úÖ Git configured${NC}" || echo -e "${YELLOW}‚ö†Ô∏è  Git not configured${NC}"
[ -f "$HOME/.zshrc" ] && echo -e "${GREEN}‚úÖ Zsh configured${NC}" || echo -e "${YELLOW}‚ö†Ô∏è  Zsh not configured${NC}"

echo ""
echo "ü§ñ AI Tools:"
check_command "cursor"
[ -d "/Applications/Claude.app" ] && echo -e "${GREEN}‚úÖ Claude Desktop installed${NC}" || echo -e "${YELLOW}‚ö†Ô∏è  Claude Desktop not found${NC}"

echo ""
echo "Health check complete! üéâ"
EOF

# Make all scripts executable
chmod +x scripts/setup-mcp.sh
chmod +x scripts/init-project.sh
chmod +x scripts/switch-client.sh
chmod +x scripts/health-check.sh

echo -e "${GREEN}  ‚úì${NC} Created utility scripts"
